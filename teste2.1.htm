<!DOCTYPE html>
<html>
<head>
  <title>Piano com seleção de teclado MIDI</title>
</head>
<body>
  <h1>Escolha o teclado MIDI para o instrumento 1:</h1>
  <select id="midi-inputs-1">
    <option disabled selected>Selecione um teclado MIDI</option>
  </select>

  <h1>Escolha o teclado MIDI para o instrumento 2:</h1>
  <select id="midi-inputs-2">
    <option disabled selected>Selecione um teclado MIDI</option>
  </select>

  <script src="https://unpkg.com/webmidi@2.5.0/webmidi.min.js"></script>
  <script src="https://unpkg.com/tone/build/Tone.js"></script>
  <script>
    var input1; // Variável para armazenar o teclado MIDI para o instrumento 1
    var input2; // Variável para armazenar o teclado MIDI para o instrumento 2
    var audioContext; // Objeto para o contexto de áudio
    var currentOscillator1; // Oscilador atual para o instrumento 1
    var currentOscillator2; // Oscilador atual para o instrumento 2

    // Função para exibir os teclados MIDI disponíveis
    function showMIDIInputs() {
      var midiInputs = WebMidi.inputs;
      var selectElement1 = document.getElementById('midi-inputs-1');
      var selectElement2 = document.getElementById('midi-inputs-2');

      midiInputs.forEach(function(input) {
        var optionElement1 = document.createElement('option');
        var optionElement2 = document.createElement('option');
        optionElement1.value = input.name;
        optionElement1.text = input.name;
        optionElement2.value = input.name;
        optionElement2.text = input.name;
        selectElement1.appendChild(optionElement1);
        selectElement2.appendChild(optionElement2);
      });
    }

    // Função para configurar o teclado MIDI para o instrumento 1
    function setupMIDIInput1() {
      var selectElement = document.getElementById('midi-inputs-1');
      var selectedInputName = selectElement.value;

      if (selectedInputName) {
        input1 = WebMidi.getInputByName(selectedInputName);

        if (input1) {
          console.log('Teclado MIDI para o instrumento 1 selecionado:', selectedInputName);
          input1.addListener('noteon', 'all', playNote1);
          input1.addListener('noteoff', 'all', releaseNote1);
        }
      }
    }

    // Função para configurar o teclado MIDI para o instrumento 2
    function setupMIDIInput2() {
      var selectElement = document.getElementById('midi-inputs-2');
      var selectedInputName = selectElement.value;

      if (selectedInputName) {
        input2 = WebMidi.getInputByName(selectedInputName);

        if (input2) {
          console.log('Teclado MIDI para o instrumento 2 selecionado:', selectedInputName);
          input2.addListener('noteon', 'all', playNote2);
          input2.addListener('noteoff', 'all', releaseNote2);
        }
      }
    }

    // Função para reproduzir a nota no sintetizador do instrumento 1
    function playNote1(event) {
      var note = event.note.number;

      // Converter o número da nota MIDI para a frequência correspondente
      var frequency = 440 * Math.pow(2, (note - 69) / 12);

      // Liberar o oscilador anterior, se houver
      releaseNote1();

      // Criar um novo oscilador para o instrumento 1
      currentOscillator1 = audioContext.createOscillator();
      currentOscillator1.type = 'triangle';
      currentOscillator1.frequency.setValueAtTime(frequency, audioContext.currentTime);
      currentOscillator1.connect(audioContext.destination);
      currentOscillator1.start();
      console.log('Nota MIDI para o instrumento 1 recebida:', note);
      console.log(`event :${event.note}`)
    }

    // Função para reproduzir a nota no sintetizador do instrumento 2
    function playNote2(event) {
      var note = event.note.number;

      // Converter o número da nota MIDI para a frequência correspondente
      var frequency = 440 * Math.pow(2, (note - 69) / 12);

      // Liberar o oscilador anterior, se houver
      releaseNote2();

      // Criar um novo oscilador para o instrumento 2
      currentOscillator2 = audioContext.createOscillator();
      currentOscillator2.type = 'triangle';
      currentOscillator2.frequency.setValueAtTime(frequency, audioContext.currentTime);
      currentOscillator2.connect(audioContext.destination);
      currentOscillator2.start();
      console.log('Nota MIDI para o instrumento 2 recebida:', note);
    }

    // Função para liberar a nota no sintetizador do instrumento 1
    function releaseNote1() {
      if (currentOscillator1) {
        currentOscillator1.stop();
        currentOscillator1.disconnect();
        currentOscillator1 = null;
      }
    }

    // Função para liberar a nota no sintetizador do instrumento 2
    function releaseNote2() {
      if (currentOscillator2) {
        currentOscillator2.stop();
        currentOscillator2.disconnect();
        currentOscillator2 = null;
      }
    }

    // Evento quando a escolha do teclado MIDI para o instrumento 1 é alterada
    document.getElementById('midi-inputs-1').addEventListener('change', setupMIDIInput1);

    // Evento quando a escolha do teclado MIDI para o instrumento 2 é alterada
    document.getElementById('midi-inputs-2').addEventListener('change', setupMIDIInput2);

    // Inicializa o WebMIDI.js e exibe os teclados MIDI disponíveis
    WebMidi.enable(function(err) {
      if (err) {
        console.log('Erro ao inicializar o WebMIDI:', err);
      } else {
        console.log('WebMIDI inicializado com sucesso!');
        showMIDIInputs();

        // Inicializa o contexto de áudio
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
      }
    });
  </script>
</body>
</html>
